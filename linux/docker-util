#!/bin/bash

# Check if fzf is installed
if ! command -v fzf &> /dev/null; then
    echo "Error: fzf is not installed. Install it with 'sudo apt install fzf' or 'sudo dnf install fzf'."
    exit 1
fi

case "$1" in
    start)
        echo "Starting Docker Compose..."
        docker compose up -d
        ;;

    build)
        if [ -z "$2" ]; then
            echo "Error: Image name not provided!"
            echo "Usage: docker-util build <image>"
            exit 1
        fi
        echo "Building Docker image: $2"
        docker build -t "$2" .
        ;;
        
    remove)
        if [ -z "$2" ]; then
            container=$(docker ps --format '{{.Names}}' | fzf --prompt="Choose a container: ")

            if [ -z "$container" ]; then
                echo "No container selected."
                exit 1
            fi
        else
            container="$2"
        fi

        echo "Removing container: $container"
        docker rm "$container" --force
        ;;
        
    remove-image)
        if [ -z "$2" ]; then
            image=$(docker images --format '{{.Repository}}' | fzf --prompt="Choose an image: ")

            if [ -z "$image" ]; then
                echo "No image selected."
                exit 1
            fi
        else
            image="$2"
        fi

        echo "Removing image: $image"
        docker rmi "$image" --force
        ;;

    stop)
        if [ -z "$2" ]; then
            container=$(docker ps --format '{{.Names}}' | fzf --prompt="Choose a container: ")

            if [ -z "$container" ]; then
                echo "No container selected."
                exit 1
            fi
        else
            container="$2"
        fi

        echo "Stopping container: $container"
        docker stop "$container"
        ;;

    stop-all)
        echo "Stopping all running containers..."
        docker stop $(docker ps -q)
        ;;

    bash)
        user=${2:-root}  # If no user is specified, use 'root'
    
        if [ -z "$3" ]; then
            container=$(docker ps --format '{{.Names}}' | fzf --prompt="Choose a container: ")

            if [ -z "$container" ]; then
                echo "No container selected."
                exit 1
            fi
        else
            container="$3"
        fi

        echo "Opening shell in container '$container' as user '$user'..."
        docker exec -it --user "$user" "$container" bash
        ;;

    list)
        container=$(docker ps --format '{{.Names}}' | fzf --prompt="Choose a container: ")

        if [ -z "$container" ]; then
            echo "No container selected."
            exit 1
        fi

        echo "Showing stats for container: $container"
        docker stats "$container" --no-stream
        ;;
        
    clear)
        if [ -z "$2" ]; then
            choice=$(printf "containers\nimages\nvolumes\nnetworks\ncache\nall" | fzf --prompt="What do you want to clear? ")
        else
            choice=$2
        fi

        case "$choice" in
        "containers")
            docker container prune -f
            ;;
        "images")
            docker image prune -a -f
            ;;
        "volumes")
            docker volume prune -f
            ;;
        "networks")
            docker network prune -f
            ;;
        "cache")
            docker builder prune -a -f
            docker buildx prune -a -f
            ;;
        "all")
            docker system prune -a --volumes -f
            docker builder prune -a -f
            docker buildx prune -a -f
            ;;
        *)
            echo "No option selected."
            ;;
        esac
        ;;

    *)
        echo "Usage: docker-util <command>"
        echo "Available commands:"
        echo "  start               - Starts Docker Compose"
        echo "  build <image>       - Builds a Docker image"
        echo "  stop <cont>         - Stops a specific container or selects one if not provided"
        echo "  stop-all            - Stops all running containers"
        echo "  bash [usr] [cont]   - Opens a Bash shell inside a container or selects one if not provided (default user: root)"
        echo "  remove [cont]       - Removes a Docker container or selects one if not provided"
        echo "  remove-image [img]  - Removes a Docker image or selects one if not provided"
        echo "  list                - Lists running containers and shows stats for selected one"
        echo "  clear [type]        - Clears Docker resources"
        exit 1
        ;;
esac
